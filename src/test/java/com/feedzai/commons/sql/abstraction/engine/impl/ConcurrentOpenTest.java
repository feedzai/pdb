package com.feedzai.commons.sql.abstraction.engine.impl;

import com.feedzai.commons.sql.abstraction.engine.DatabaseEngine;
import com.feedzai.commons.sql.abstraction.engine.DatabaseFactory;
import com.feedzai.commons.sql.abstraction.engine.DatabaseFactoryException;
import com.feedzai.commons.sql.abstraction.engine.handler.ExceptionHandler;
import com.feedzai.commons.sql.abstraction.util.PreparedStatementCapsule;
import org.junit.Test;

import java.nio.file.Paths;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;
import java.util.TreeMap;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * Created by paulo.leitao on 24-11-2015.
 */
public class ConcurrentOpenTest {

    @Test
    public void concurrentOpenTest() throws Exception {
        /*
        createThread();
        createThread();
        createThread();
        createThread();
*/

        DatabaseEngine conn = connect();
        conn.beginTransaction();

        boolean hasVal;

        PreparedStatement stmt = conn.getConnection().prepareStatement("select * from fdz_app_stream");
        ResultSet rs1 = stmt.executeQuery();
//        ResultSet rs1 = stmt.executeQuery("select 1,2,2 from dual");
        hasVal = rs1.next();

        ResultSet rs2 = stmt.executeQuery();
        rs2.next();
        int val = rs2.getInt(1);

  //      hasVal = rs1.next();
        /*
        try {
            val = rs1.getInt(1);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        */

        conn.commit();

        ProcessBuilder builder = new ProcessBuilder(
//                "/bin/ls"
                Paths.get(System.getProperty("java.home"), "bin", "java").toString()
        );
        Process p = builder.start();
        p.waitFor();

//        boolean alive = conn.checkConnection();

        conn.getConnection().setAutoCommit(false);

//        conn.rollback();
//        conn.rollback();
        conn.beginTransaction();
//        System.out.println("Finished, exit = " + p.exitValue() + ", alive = " + alive);

        Thread.sleep(200000);
    }

    private void createThread() {
        new Thread(
            new Runnable() {
                @Override
                public void run() {
                    try {
                        for(int i = 0 ; i < 50 ; i++) {
                            connect();
                        }
                        System.out.println("Thread Done");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        ).start();
    }

    private DatabaseEngine connect() throws DatabaseFactoryException {
        Properties props = new Properties();
        props.put("pdb.engine", "com.feedzai.commons.sql.abstraction.engine.impl.OracleEngine");
//        props.put("pdb.jdbc", "jdbc:oracle:thin:@test-oracle.zai:1521:orcl");
        props.put("pdb.jdbc", "jdbc:oracle:thin:@test-oracle.zai:1523:orcl2");
        props.put("pdb.username", "pdb");
        props.put("pdb.password", "pdb");

        return DatabaseFactory.getConnection(props);
//        engine.close();
    }

}
